// stub script

global function Bombardment_Init
global function VerifyBombardmentWeapon
global function Bombardment_MortarBarrageFocused
global function Bombardment_MortarBarrageDetCord

void function Bombardment_Init()
{

}

entity function VerifyBombardmentWeapon( entity owner, string weapon )
{
	foreach(entity w in GetAllPlayerWeapons(owner))
	{
		if(w.GetWeaponClassName() == weapon)
			return w
	}
    return null
}

void function Bombardment_MortarBarrageFocused_SpawnMarker(float delay, entity owner, asset effect, vector origin)
{
	wait delay
	
	entity marker = StartParticleEffectInWorld_ReturnEntity( GetParticleSystemIndex( effect ), origin, <0,0,0> )
	AddToUltimateRealm( owner, marker )
	EntFireByHandle( marker, "Kill", "", 2, null, null )	// kill after 2s	
}

void function Bombardment_MortarBarrageFocused( entity weapon, asset effect, vector origin, float radius, int intensity, float duration, float delay )
{
	entity owner = weapon.GetOwner()
	
	if(!IsValid(owner))
		return
	
	int damageFlags = weapon.GetWeaponDamageFlags()
	WeaponFireGrenadeParams fireGrenadeParams
	fireGrenadeParams.pos = origin+<0,0,5000>
	fireGrenadeParams.vel = <0,0,0>
	fireGrenadeParams.angVel = <0,0,0>
	fireGrenadeParams.fuseTime = 8
	fireGrenadeParams.scriptTouchDamageType = (damageFlags & ~DF_EXPLOSION) // when a grenade "bonks" something, that shouldn't count as explosive.explosive
	fireGrenadeParams.scriptExplosionDamageType = damageFlags
	fireGrenadeParams.clientPredicted = false
	fireGrenadeParams.lagCompensated = true
	fireGrenadeParams.useScriptOnDamage = true
	
	float endTime = Time() + duration
	
	while(Time() < endTime)
	{
		wait 1.0/intensity
		
		if(weapon == null || !IsValid(weapon))
			return
		
		vector landRadiusOffset = <RandomFloatRange(-radius,radius)/2,RandomFloatRange(-radius,radius)/2,0>
		
		entity projectile = weapon.FireWeaponGrenade( fireGrenadeParams )
		
		/* TODO: Should start from the center and move toward the offset pos */
		projectile.SetAngles(<90,0,0>)
		projectile.SetOrigin(fireGrenadeParams.pos + landRadiusOffset)
		
		/* TODO: Should get the correct destination of the projectile */	
		thread Bombardment_MortarBarrageFocused_SpawnMarker(2, owner, effect, origin + landRadiusOffset + <0,0,40>)
	}
}

void function Bombardment_MortarBarrageDetCord( entity weapon, asset effect, vector direction, vector origin, vector projectileOrigin, float width, float perStep, int count, float interval, float delay )
{

}